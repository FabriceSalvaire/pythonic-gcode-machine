



.. getthecode:: generate-gcode.py
    :language: python3
    :hidden:

===========================
 Generate a G-code program
===========================

For API see

* :mod:`PythonicGcodeMachine.Gcode.Rs274`
* :mod:`PythonicGcodeMachine.Gcode.Rs274.Ast`
* :mod:`PythonicGcodeMachine.Gcode.Rs274.Parser`

.. code-block:: py3

    
    
    from PythonicGcodeMachine.Gcode.Rs274.Ast import *
    from PythonicGcodeMachine.Gcode.Rs274.Parser import GcodeParser
    
    

Create a G-code line (block) using AST API

.. code-block:: py3

    
    line = Line(deleted=False, line_number=1, comment='a G-code block')
    
    # Push some items
    # Note: order doesn't matter, see RS-274 for details
    line += Word('G', 0)
    line += Comment('fast move')
    line += Word('X', 10)
    line += Word('Y', 20)
    
    print(line)


.. code-block:: none

    N1 G0 (fast move) X10 Y20 ; a G-code block
    

More simpler way to pass G/M-code

.. code-block:: py3

    
    a_line = Line()
    a_line += 'G0'
    a_line += Word('X', 10)
    print(a_line)


.. code-block:: none

    G0 X10
    

Using the G-code parser

.. code-block:: py3

    
    parser = GcodeParser()
    
    a_line = parser.parse('G0 X0 Y0')
    a_line += Word('Z', 0)
    print(a_line)


.. code-block:: none

    G0 X0 Y0 Z0
    


.. code-block:: py3

    
    a_line = Line()
    a_line += 'G0'
    
    parsed_line = parser.parse('X1 Y2')
    print(list(parsed_line))
    first_item = parsed_line[0]
    print(first_item)
    a_line += parsed_line
    
    print(a_line)


.. code-block:: none

    [Word(X, 1), Word(Y, 2)]
    X1
    G0 X1 Y2
    

Expression : the AST way

.. code-block:: py3

    
    line2 = line.clone()
    line2 += Word('Z', Addition(30, Multiply(Parameter(100), Cosine(30))))
    print(line2)


.. code-block:: none

    N1 G0 (fast move) X10 Y20 Z[30 + [#100 * cos[30]]] ; a G-code block
    

Expression : the literal way

.. code-block:: py3

    
    line3 = line.clone()
    line3 += Word('Z', '[30 + [#100 * cos[30]]]')
    print(line3)


.. code-block:: none

    N1 G0 (fast move) X10 Y20 Z[30 + [#100 * cos[30]]] ; a G-code block
    

Invalid expression

.. code-block:: py3

    
    try:
        line4 = line.clone()
        line4 += Word('Z', '1 + 2]')
        print(line4)
    except ValueError:
        pass
    

Create a G-code program

.. code-block:: py3

    
    program = Program()
    
    program += line
    
    line2.line_number = 2
    line2.comment = 'using expression'
    program += line2
    
    line3.deleted = True
    line3.line_number = 3
    line3.comment = None
    program += line3
    
    print(program)


.. code-block:: none

    N1 G0 (fast move) X10 Y20 ; a G-code block
    N2 G0 (fast move) X10 Y20 Z[30 + [#100 * cos[30]]] ; using expression
    / N3 G0 (fast move) X10 Y20 Z[30 + [#100 * cos[30]]]
    

Line cleanup tools

.. code-block:: py3

    
    line = Line(deleted=False, line_number=1, comment='a G-code block')
    line += 'G0'
    line += Comment('fast move')
    line += Word('X', 10)
    line += Word('Y', 20)
    
    print(line)


.. code-block:: none

    N1 G0 (fast move) X10 Y20 ; a G-code block
    


.. code-block:: py3

    
    line.toggle()
    print(line)


.. code-block:: none

    / N1 G0 (fast move) X10 Y20 ; a G-code block
    


.. code-block:: py3

    
    line.toggle()
    line.remove_line_number()
    print(line)


.. code-block:: none

    G0 (fast move) X10 Y20 ; a G-code block
    


.. code-block:: py3

    
    line.remove_comment()
    print(line)


.. code-block:: none

    G0 X10 Y20
    

